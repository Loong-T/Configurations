set nocompatible              " be iMproved
filetype off                  " required!

syntax on
set number
set mousehide
set hidden
set history=100
set autoread
set hlsearch
set incsearch

" set encoding=utf-8
" set termencoding=utf-8
set fileencoding=utf-8
set fileencodings=utf-8,chinese,cp936  " 查看encoding-name帮助来确定

set expandtab  " 自动展开tab成空格
set shiftwidth=2  " 每层缩进2空格
set tabstop=2  " tab宽度

set guioptions-=m  " 去掉GUI的菜单
set guioptions-=T  " 去掉GUI的工具栏

" 显示空格
set list
set listchars=tab:>.,trail:.,extends:#,nbsp:.

" Backspace在Insert mode下异常
set backspace=2
set backspace=indent,eol,start

" 对Windows进行设置
if has("win32")
  set guifont=Consolas:h12:cDEFAULT
  " set guifontwide=YaHei\ Consolas\ Hybrid:h11
  " au GUIEnter * simalt ~x  " 最大化窗口
endif

" 自动切换工作目录
set autochdir

set t_Co=256
" colorscheme desert

map <Leader>clears :let @/=""<CR>
map <Leader>source :source ~\_vimrc<CR>

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
" call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'

Plugin 'tpope/vim-sensible'

" ColorScheme DsertEx
Plugin 'vim-scripts/desertEx'
colorscheme desertEx

Plugin 'myusuf3/numbers.vim'

Plugin 'kien/rainbow_parentheses.vim'
au VimEnter * RainbowParenthesesToggle
au Syntax * RainbowParenthesesLoadRound
au Syntax * RainbowParenthesesLoadSquare
au Syntax * RainbowParenthesesLoadBraces

Plugin 'tpope/vim-surround'

" Emmet
Plugin 'mattn/emmet-vim'
" Emmet Configurations
" let g:user_emmet_mode='n'  " 只启用normal模式功能
" let g:user_emmet_mode='inv'  " 启用所有模式功能，下同
" let g:user_emmet_mode='a'
" 只对html/css启用
" let g:user_emmet_install_global = 0
" autocmd FileType html,css EmmetInstall

" 识别文件编码
Plugin 'FencView.vim'

" ShowTrailingWhitespace
Plugin 'ShowTrailingWhitespace'

" EasyMotion
Plugin 'EasyMotion'

" The-NERD-tree
Plugin 'scrooloose/nerdtree'
" 在 vim 启动的时候默认开启 NERDTree（autocmd 可以缩写为 au）
" au vimEnter * NERDTree

" The-NERD-Commenter 快速注释
Plugin 'The-NERD-Commenter'

" UltiSnips
Plugin 'SirVer/ultisnips'

" Snippets are separated from the engine. Add this if you want them:
Plugin 'honza/vim-snippets'

" Trigger configuration. Do not use <tab> if you use https://github.com/Valloric/YouCompleteMe.
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<c-b>"
let g:UltiSnipsJumpBackwardTrigger="<c-z>"
" If you want :UltiSnipsEdit to split your window.
" let g:UltiSnipsEditSplit="vertical"

" vim_indent-guides
Plugin 'nathanaelkane/vim-indent-guides'
let g:indent_guides_start_level=2
let g:indent_guides_guide_size=1

" CtrlP
Plugin 'ctrlpvim/ctrlp.vim'
" Change the default mapping and the default command to invoke CtrlP
let g:ctrlp_map = '<c-p>'
let g:ctrlp_cmd = 'CtrlP'

Plugin 'edsono/vim-matchit'
Plugin 'vim-airline/vim-airline'
" Plugin 'scrooloose/syntastic'
Plugin 'airblade/vim-gitgutter'
Plugin 'tpope/vim-fugitive'

" file type
" vim-sacla
Plugin 'derekwyatt/vim-scala'
" markdown
Plugin 'godlygeek/tabular'
Plugin 'plasticboy/vim-markdown'

" Custom text object
Plugin 'kana/vim-textobj-user'

Plugin 'ervandew/supertab'
Plugin 'Townk/vim-autoclose'

" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on     " required!

" 保存窗口位置和大小
if has("gui_running")
  function! ScreenFilename()
    if has('amiga')
      return "s:.vimsize"
    elseif has('win32')
      return $HOME.'\_vimsize'
    else
      return $HOME.'/.vimsize'
    endif
  endfunction

  function! ScreenRestore()
    " Restore window size (columns and lines) and position
    " from values stored in vimsize file.
    " Must set font first so columns and lines are based on font size.
    let f = ScreenFilename()
    if has("gui_running") && g:screen_size_restore_pos && filereadable(f)
      let vim_instance = (g:screen_size_by_vim_instance==1?(v:servername):'GVIM')
      for line in readfile(f)
        let sizepos = split(line)
        if len(sizepos) == 5 && sizepos[0] == vim_instance
          silent! execute "set columns=".sizepos[1]." lines=".sizepos[2]
          silent! execute "winpos ".sizepos[3]." ".sizepos[4]
          return
        endif
      endfor
    endif
  endfunction

  function! ScreenSave()
    " Save window size and position.
    if has("gui_running") && g:screen_size_restore_pos
      let vim_instance = (g:screen_size_by_vim_instance==1?(v:servername):'GVIM')
      let data = vim_instance . ' ' . &columns . ' ' . &lines . ' ' .
            \ (getwinposx()<0?0:getwinposx()) . ' ' .
            \ (getwinposy()<0?0:getwinposy())
      let f = ScreenFilename()
      if filereadable(f)
        let lines = readfile(f)
        call filter(lines, "v:val !~ '^" . vim_instance . "\\>'")
        call add(lines, data)
      else
        let lines = [data]
      endif
      call writefile(lines, f)
    endif
  endfunction

  if !exists('g:screen_size_restore_pos')
    let g:screen_size_restore_pos = 1
  endif
  if !exists('g:screen_size_by_vim_instance')
    let g:screen_size_by_vim_instance = 1
  endif
  autocmd VimEnter * if g:screen_size_restore_pos == 1 | call ScreenRestore() | endif
  autocmd VimLeavePre * if g:screen_size_restore_pos == 1 | call ScreenSave() | endif
endif
